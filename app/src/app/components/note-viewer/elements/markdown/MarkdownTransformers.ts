import { ShowdownExtension } from 'showdown';
import { evaluateFendWithTimeoutMultiple } from 'fend-wasm';

export type MarkdownTransformer = ShowdownExtension;

export const fendTransformer: MarkdownTransformer = {
	type: 'lang',
	filter: (text, converter, options) => {
		// e.g. [[1+1]] -> 2
		let expressions: string[] = [];
		for (let match of text.matchAll(/\[\[([^]+?)\]\]/gi)) {
			expressions.push(match[1]);
		}
		if (expressions.length === 0) {
			return text;
		}
		const results = evaluateFendWithTimeoutMultiple(expressions.join("\0"), 500).split("\0");
		let index = 0;
		return text.replace(/\[\[([^]+?)\]\]/gi, (match, content) => {
			let result = results[index++];
			if (result === "Error: interrupted") {
				result = "Error: Calculation timed out";
			}
			if (result.startsWith("Error:")) {
				result = `<span style="color: red"><i>${result}</i></span>`;
			}
			return `<span title="Generated by fend">${result}</span>`;
		});
	}
};

export const colourTransformer: MarkdownTransformer = {
	type: 'listener',
	listeners: {
		'images.after': (event, text: string) =>
			// e.g. c[this is green](green), or c[red](rgb(255, 0, 0))
			text.replace(/c\[([^\]]+)]\(([^()]*(?:\([^()]*\)[^()]*)?)\)/gi, (match, content, colour) =>
				`<span style="color: ${colour}">${content}</span>`
			)
	}
};
