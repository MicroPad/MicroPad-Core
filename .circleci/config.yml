# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  build:
    docker:
      - image: cimg/node:lts
    working_directory: ~/repo
    steps:
      - checkout

      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ .Branch }}-{{ checksum "app/yarn.lock" }}

      - run: cd app && yarn

      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ .Branch }}-{{ checksum "app/yarn.lock" }}
          paths:
            - app/node_modules/

      # Validate if we're building good code
      - run: cd app && yarn typecheck
      - run: cd app && yarn lint

      # Actually build the code, and then persist the result
      - run: cd app && yarn build && tar cfJ micropad.tar.xz build/*
      - store_artifacts:
          path: app/micropad.tar.xz
          destination: micropad.tar.xz
      - persist_to_workspace:
          root: app/
          paths:
            - package.json
            - yarn.lock
            - build/*
            - micropad.tar.xz

  test:
    docker:
      # specify the version you desire here
      - image: mcr.microsoft.com/playwright:focal
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    working_directory: ~/repo

    environment:
      NODE_ENV: development

    steps:
      - checkout

      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ .Branch }}-{{ checksum "app/yarn.lock" }}

      - run: cd app && yarn

      # Load in the built MicroPad to run an instance for testing
      - attach_workspace:
          at: /tmp/mp-build
      - run:
          command: python3 -m http.server 3000
          working_directory: /tmp/mp-build/build
          background: true

      # Run the e2e integration tests
      - run: cd app && yarn test --runInBand
      - store_test_results:
          path: app/.reports

  deploy:
    docker:
      - image: cimg/node:lts

    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: ~/repo/app
      - run: sudo apt-get update && sudo apt-get install -y rsync
      - run: rsync -aue "ssh -p 1276 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" app/build/* $SSH_PATH

  canary-deploy:
    docker:
      - image: cimg/node:lts

    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: ~/repo/app
      - run: sudo apt-get update && sudo apt-get install -y rsync
      - run: rsync -aue "ssh -p 1276 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" app/build/* $NEXT_SSH_PATH

  publish-github-release:
    docker:
      - image: cimg/node:lts

    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: ~/repo/app
      - run:
          name: "Publish Release on GitHub"
          command: |
            cd app
            GHR_VERSION=0.13.0
            GHR_URL=https://github.com/tcnksm/ghr/releases/download/v${GHR_VERSION}/ghr_v${GHR_VERSION}_linux_amd64.tar.gz
            wget "$GHR_URL"
            tar xzf ghr_v${GHR_VERSION}_linux_amd64.tar.gz
            mv ghr_v${GHR_VERSION}_linux_amd64/ghr .
            VERSION=$(npm pkg get version | sed 's/"//g')
            echo "Publishing ${VERSION}"
            ./ghr -t ${GH_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ~/repo/app/micropad.tar.xz

workflows:
  version: 2
  test-and-deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - publish-github-release:
          requires:
            - test
            - build
          filters:
            branches:
              only: master
      - canary-deploy:
          requires:
            - test
            - build
          filters:
            branches:
              only: next-dev
      - deploy:
          requires:
            - test
            - build
          filters:
            branches:
              only: master
